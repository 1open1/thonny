import time
import RPi.GPIO as gpio  # Import Raspberry Pi GPIO library

gpio.setwarnings(False)  # Disable warnings
gpio.setmode(gpio.BOARD)  # Use physical pin numbering

gpio.setup(40, gpio.IN, pull_up_down=gpio.PUD_UP)  # Set GPIO 40 as input with pull-up resistor
gpio.setup(33, gpio.OUT)  # Set GPIO 33 as output for LED

try:
    while True:  # Infinite loop
        button_state = gpio.input(40)  # Read button state

        if button_state == False:  # If button is pressed
            gpio.output(33, False)  # Turn OFF LED
            print("Button Pressed")  # Display message
            time.sleep(0.2)  # Delay to avoid bouncing
        else:
            gpio.output(33, True)  # Turn ON LED

except:
    gpio.cleanup()  # Reset GPIO when the program is stopped    
 # Import necessary libraries
import RPi.GPIO as gpio  # Library to control Raspberry Pi GPIO pins
import time  # Library for adding delays

# Set up GPIO mode (use BOARD numbering)
gpio.setmode(gpio.BOARD)

# Define GPIO pins
button_pin = 40  # Switch is connected to GPIO 40
led1_pin = 31  # LED 1 connected to GPIO 31
led2_pin = 35  # LED 2 connected to GPIO 35

# Set up the switch as an input with a pull-up resistor
gpio.setup(button_pin, gpio.IN, pull_up_down=gpio.PUD_UP)

# Set up LEDs as output
gpio.setup(led1_pin, gpio.OUT)
gpio.setup(led2_pin, gpio.OUT)

try:
    while True:
        button_state = gpio.input(button_pin)  # Read button state

        if button_state == False:  # Button is pressed (LOW)
            gpio.output(led1_pin, True)  # Turn LED 1 ON
            gpio.output(led2_pin, True)  # Turn LED 2 ON
            print("Button Pressed - LEDs ON")
        else:  # Button is released (HIGH)
            gpio.output(led1_pin, False)  # Turn LED 1 OFF
            gpio.output(led2_pin, False)  # Turn LED 2 OFF
            print("Button Released - LEDs OFF")

        time.sleep(0.1)  # Small delay to debounce

except KeyboardInterrupt:  # Handle Ctrl+C exit
    print("\nExiting... Cleaning up GPIO")
    gpio.cleanup()  # Reset GPIO settings.  
   # Import necessary libraries
import RPi.GPIO as gpio  # Library to control Raspberry Pi GPIO pins
import time  # Library for adding delays

# Set up GPIO mode (use BOARD numbering)
gpio.setmode(gpio.BOARD)

# Define GPIO pins
button1_pin = 40  # Switch 1 connected to GPIO 40
button2_pin = 38  # Switch 2 connected to GPIO 38
led1_pin = 31  # LED 1 connected to GPIO 31
led2_pin = 35  # LED 2 connected to GPIO 35

# Set up the switches as inputs with pull-up resistors
gpio.setup(button1_pin, gpio.IN, pull_up_down=gpio.PUD_UP)
gpio.setup(button2_pin, gpio.IN, pull_up_down=gpio.PUD_UP)

# Set up LEDs as output
gpio.setup(led1_pin, gpio.OUT)
gpio.setup(led2_pin, gpio.OUT)

try:
    while True:
        button1_state = gpio.input(button1_pin)  # Read Switch 1 state
        button2_state = gpio.input(button2_pin)  # Read Switch 2 state

        # Control LED 1 with Switch 1
        if button1_state == False:  # Button 1 is pressed (LOW)
            gpio.output(led1_pin, True)  # Turn LED 1 ON
            print("Switch 1 Pressed - LED 1 ON")
        else:  # Button 1 is released (HIGH)
            gpio.output(led1_pin, False)  # Turn LED 1 OFF
            print("Switch 1 Released - LED 1 OFF")

        # Control LED 2 with Switch 2
        if button2_state == False:  # Button 2 is pressed (LOW)
            gpio.output(led2_pin, True)  # Turn LED 2 ON
            print("Switch 2 Pressed - LED 2 ON")
        else:  # Button 2 is released (HIGH)
            gpio.output(led2_pin, False)  # Turn LED 2 OFF
            print("Switch 2 Released - LED 2 OFF")

        time.sleep(0.1)  # Small delay to debounce

except KeyboardInterrupt:  # Handle Ctrl+C exit
    print("\nExiting... Cleaning up GPIO")
    gpio.cleanup()  # Reset GPIO settings
